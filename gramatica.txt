#=====================================#
|          Gram치tica Etapa 1          |
#=====================================#

-- Formato BNF extendido
G = ({S, IDEN}, {int, char, float, id, ,, ;}, P, S)
P = {
        <S>    ::= <TIPO> <IDEN>; [<S>]
		<TIPO> ::= char | float | int
        <IDEN> ::= id[, <IDEN>]
    }

-- Gram치tica do compilador
G = ({S, PROGRAMA, DECLARACAO_VAR, SEQUENCIA_VAR, TIPO, VARIAVEL, FIM}, {char, int, float, iden, ,, ;}, P, S)
P = {
        <S> 			 ::= <PROGRAMA>
		<PROGRAMA> 		 ::= <DECLARACAO_VAR>
		<DECLARACAO_VAR> ::= <TIPO> <SEQUENCIA_VAR> <FIM> | <TIPO> <SEQUENCIA_VAR> <FIM> <DECLARACAO_VAR>
		<TIPO> 			 ::= char | int | float
		<SEQUENCIA_VAR>  ::= <VARIAVEL> | <VARIAVEL> , <SEQUENCIA_VAR>
		<VARIAVEL> 		 ::= iden
		<FIM> 			 ::= ;
    }

#=====================================#
|          Gram치tica Etapa 2          |
#=====================================#

-- Formato BNF extendido
G = ({S, IDEN}, {int, char, float, id, ,, ;}, P, S)
P = {
        <S>    ::= <TIPO> <IDEN>; [<S>]
		<TIPO> ::= char | float | int
        <IDEN> ::= id[, <IDEN>]
    }

-- Gram치tica do compilador
G = ({S, FIM, NUM, TIPO, VARIAVEL, PROGRAMA, SEQUENCIA_CODIGO, CODIGO, CONDICAO, COMANDOS, EXPRESSAO_RELACIONAL, EXPRESSAO_MATEMATICA, OPERACAO_MATEMATICA, VAR_OU_NUM, OPERADOR_ATRIBUICAO, ATRIBUICAO, DECLARACAO_VAR, DECLARACAO_IF, DECLARACAO_SWITCH, DECLARACAO_CASE, SEQUENCIA_CASE, DECLARACAO_DEFAULT, SEQUENCIA_VAR}, {char, int, float, if, else, switch, case, break, default, iden, num, ,, ;, :, (, ), {, }, ==, !=, <=, >=, <, >, +, -, *, /, ++, --, =, +=, -=, *=, /=}, P, S)
P = {
        <S> 			 		::= <PROGRAMA>
		<FIM> 			 		::= ;
		<NUM>			 		::= num
		<TIPO> 			 		::= char | int | float
		<VARIAVEL> 		 		::= iden
		<PROGRAMA> 		 		::= <SEQUENCIA_CODIGO>
		<SEQUENCIA_CODIGO>		::= <CODIGO> <SEQUENCIA_CODIGO> | <CODIGO>
		<CODIGO>				::= <DECLARACAO_VAR> | <DECLARACAO_IF> | <DECLARACAO_SWITCH>
		<CONDICAO>				::= <EXPRESSAO_RELACIONAL>
		<COMANDOS>				::= <ATRIBUICAO> <COMANDOS> | <ATRIBUICAO>
		<EXPRESSAO_RELACIONAL>	::= <VAR_OU_NUM> > <VAR_OU_NUM> | <VAR_OU_NUM> < <VAR_OU_NUM> | <VAR_OU_NUM> >= <VAR_OU_NUM> | <VAR_OU_NUM> <= <VAR_OU_NUM> | <VAR_OU_NUM> == <VAR_OU_NUM> | <VAR_OU_NUM> != <VAR_OU_NUM>
		<EXPRESSAO_MATEMATICA>	::= <VAR_OU_NUM> | <VAR_OU_NUM> <OPERACAO_MATEMATICA> <EXPRESSAO_MATEMATICA>
		<OPERACAO_MATEMATICA>	::= + | - | * | /
		<VAR_OU_NUM>			::= <VARIAVEL> | <NUM>
		<OPERADOR_ATRIBUICAO>	::= = | += | -= | *= | /=
		<ATRIBUICAO>			::= <VARIAVEL> <OPERADOR_ATRIBUICAO> <EXPRESSAO_MATEMATICA> <FIM> | <VARIAVEL> <OPERADOR_ATRIBUICAO> <VAR_OU_NUM> <FIM> | <VARIAVEL> ++ <FIM> | <VARIAVEL> -- <FIM>
		<DECLARACAO_VAR> 		::= <TIPO> <SEQUENCIA_VAR> <FIM> | <TIPO> <SEQUENCIA_VAR> <FIM> <DECLARACAO_VAR>
		<DECLARACAO_IF>			::= if ( <CONDICAO> ) { <COMANDOS> } | if ( <CONDICAO> ) { <COMANDOS> } else { <COMANDOS> }
		<DECLARACAO_SWITCH>		::= switch ( <VARIAVEL> ) { <DECLARACAO_CASE> } | switch ( <VARIAVEL> ) { <DECLARACAO_CASE> <DECLARACAO_DEFAULT> }
		<DECLARACAO_CASE>		::= <SEQUENCIA_CASE> { <COMANDOS> break <FIM> } <DECLARACAO_CASE> | <SEQUENCIA_CASE> { <COMANDOS> break <FIM> }
		<SEQUENCIA_CASE>		::= case <VAR_OU_NUM> : <SEQUENCIA_CASE> | case <VAR_OU_NUM> :
		<DECLARACAO_DEFAULT>	::= default : { <COMANDOS> }
		<SEQUENCIA_VAR>  		::= <VARIAVEL> | <VARIAVEL> , <SEQUENCIA_VAR>
    }